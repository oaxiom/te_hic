#!/usr/bin/env python3

'''

get chromatin contacts, based on one anchors, or a BED -> gene promoter

'''

import sys, os, argparse, logging

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import tehiclib
sys.path.append(os.path.join(script_path, '../tehiclib'))
from miniglbase3 import glload

# Command-line options;
def prepare_parser():
    defaults = {
        '-w': 5000,
        '-t': 1
        }

    exmp = 'Example usage: [te_hic] getContacts -i in.bam -o out.bam -g genome -m genes_tes'

    description = ''

    parser = argparse.ArgumentParser(prog='getContacts', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('-w', '--window', action='store', type=int, default=defaults['-w'], required=False, help='Window size (in base pairs) to look around the BED, gene TSS and/or TE, default={}'.format(defaults['-w']))
    optional.add_argument('-t', '--threshold', action='store', type=int, default=defaults['-t'], required=False, help='Thresold (in reads) to call a contact default={}'.format(defaults['-t']))

    optional.add_argument('-p', '--inpeaksbed', nargs=1, required=False, help='A BED file contining peaks or sites to consider measuring for contacts')
    optional.add_argument('-g', '--genome', nargs=1, required=False, help='Optional, but requried if "tes" or "genes" in --mode. Genome assembly to use, valid genomes: {}'.format(tehiclib.common.valid_assemblies))

    required = parser.add_argument_group('required arguments')

    required.add_argument('-i', '--inreadsbedpe', nargs=1, required=True, help='A BEDPE file containing the HiC reads, from one side to the other')
    required.add_argument('-o', '--outtsv', nargs=1, required=True, help='the TSV file to save the genes and count data to')
    required.add_argument('-m', '--mode', nargs=1, required=True, help='Type of annotation to use, valid modes: {}'.format(tehiclib.common.valid_modes))

    parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('getContacts')

    return parser

def main():
    assert sys.version_info >= (3, 6), 'Python >=3.6 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log
    args.mode = args.mode[0]

    log.info('getContacts')
    log.info('Arguments:')
    log.info('  inreadsbedpe: %s' % args.inreadsbedpe)
    log.info('  inpeaksbed: %s' % args.inpeaksbed)
    log.info('  outtsv: %s' % args.outtsv)
    log.info('  genome: "%s"' % args.genome)
    log.info('  mode: "%s"' % args.mode)
    log.info('  window: %s' % args.window)
    log.info('  threshold: {0} reads'.format(args.threshold))

    # check BED arg requirements for mode
    if args.mode == 'bed_to_bed':
        if not args.inpeaksbed:
            raise AssertionError('--inpeaksbed cannot be None if --mode=bed_to_bed')
    elif args.mode == 'bed_to_gene':
        if not args.inpeaksbed:
            raise AssertionError('--inpeaksbed cannot be None if --mode=bed_to_genes')
        if not args.genome:
            raise AssertionError('--genome cannot be None if --mode=bed_to_genes')
    elif args.mode == 'genes_to_te':
        if not args.genome:
            raise AssertionError('--genome cannot be None if --mode=genes_to_tes')
    elif args.mode == 'bed_to_te':
        if not args.inpeaksbed:
            raise AssertionError('--inpeaksbed cannot be None if --mode=bed_to_tes')
        if not args.genome:
            raise AssertionError('--genome cannot be None if --mode=bed_to_tes')
    elif args.mode == 'bed_to_teandgene':
        if not args.inpeaksbed:
            raise AssertionError('--inpeaksbed cannot be None if --mode=bed_to_tes_to_genes')
        if not args.genome:
            raise AssertionError('--genome cannot be None if --mode=bed_to_tes_to_genes')
    else:
        raise AssertionError('{0} mode not found'.format(args.mode[0]))

    te_hic = tehiclib.measure_contacts(logger=log)

    if args.mode == 'bed_to_bed':
        te_hic.bed_to_bed(
            reads=args.inreadsbedpe[0],
            bed=args.inpeaksbed[0],
            window=args.window,
            outfile=args.outtsv[0],
            threshold=args.threshold,
            )

    elif args.mode == 'bed_to_gene':
        # check genome is available;
        args.genome = args.genome[0]
        if args.genome not in tehiclib.common.valid_assemblies:
            log.error('{0} assembly not found'.format(args.genome))
            log.error('Valid assemblies are: {0}'.format(tehiclib.common.valid_assemblies))

        script_path = os.path.dirname(os.path.realpath(__file__))
        genelist_glb_filename = os.path.join(script_path, '../genome/{0}_glb_gencode_promoters.glb'.format(args.genome))
        genome_data = glload(genelist_glb_filename)
        log.info('Loaded {0}'.format(genelist_glb_filename))

        te_hic.bed_to_genespromoter(
            genome_data=genome_data,
            reads=args.inreadsbedpe[0],
            bed=args.inpeaksbed[0],
            window=args.window,
            outfile=args.outtsv[0],
            threshold=args.threshold,
            )

    elif args.mode == 'genes_to_te':
        raise AssertionError('-mode=genes_to_tes not implemented')
    elif args.mode == 'bed_to_te':
        raise AssertionError('-mode=bed_to_tes not implemented')
    elif args.mode == 'bed_to_teandgene':
        raise AssertionError('-mode=bed_to_tes_to_genes not implemented')
    else:
        raise AssertionError('{0} mode not found'.format(args.mode[0]))

    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
