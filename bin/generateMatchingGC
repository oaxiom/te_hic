#!/usr/bin/env python3

import sys
import os
import argparse
import logging

logging.getLogger('matplotlib').setLevel(logging.WARNING)

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import tehiclib


def prepare_parser():
    defaults = {
        '-w': 5000,
        '-t': 1
    }

    exmp = 'Example usage: generateMatchingGC -c peaks.bed -o peaks.gc.bed.gz'

    description = '''
    Generate a BED peak file wityh a (roughly) matching GC content.
    '''

    parser = argparse.ArgumentParser(prog='contactZ', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()

    required = parser.add_argument_group('required arguments')
    required.add_argument('-p', '--inpeaksbed', nargs=1, required=True,
                          help='A BED file contining peaks or sites to consider')
    required.add_argument('-o', '--outpeaksbed', nargs=1, required=True,
                          help='A BED file to save the GC-normalised random peaks to')

    parser._action_groups.append(optional)

    other_logs = logging.getLogger()
    other_logs.setLevel(logging.CRITICAL)

    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)-8s: %(message)s',
                        datefmt='%m-%d %H:%M')

    logger = logging.getLogger('contactZ')
    logger.setLevel(level=logging.INFO)

    parser.log = logger

    return parser


def main():
    assert sys.version_info >= (3, 7), 'Python >=3.7 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log
    args.label = args.label[0]
    args.inreadsbedpe = args.inreadsbedpe[0]

    log.info('generateMatchingGC')
    log.info('Arguments:')
    log.info('  inpeaksbed: %s' % args.inpeaksbed)

    coords = cZ.generate_matched_random(args.inpeaksbed[0], GC=args.gc)



    return


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)

