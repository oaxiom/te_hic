#!/usr/bin/env python3

'''

Insert custom

MIT license:
Copyright (C) 2019-2025 Andrew Hutchins, Shi Liyang

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

Except as contained in this notice, the name(s) of the above copyright holders shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import sys
import os
import argparse
import logging
import gzip

logging.getLogger('matplotlib').setLevel(logging.WARNING)

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import tehiclib

# Command-line options;
def prepare_parser():
    defaults = {
        '-w': 5000,
        '-t': 1
        }

    exmp = 'Example usage: contactZ -c peaks.bed -i reads.bedpe -n sample_label'

    description = '''
    Calculate a contact-Z score for a custom BED set of peaks. Note that this '
    approach only works with hg38 genome.
    
    Additionally, it is probably best for hPSCs, but it may apply to your specific system.
    It's just not tested. 
    '''

    parser = argparse.ArgumentParser(prog='contactZ', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('-w', '--window', action='store', type=int, default=defaults['-w'], required=False, help='Window size (in base pairs) to look around the BED, default={}'.format(defaults['-w']))
    optional.add_argument('--gc', action='store_true', default=False, required=False,
                          help='Enforce GC normalisation of the background (exclusive with --shuf)')
    optional.add_argument('--shuf', action='store_true', default=False, required=False,
                          help='Use a normalised background by pulling from shuffled peaks (exclusive with --gc)')
    optional.add_argument('--cached', action='store_true', default=False, required=False,
                          help='Cache the BEDPE for speed. Needs a lot of RAM!')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-p', '--inpeaksbed', nargs=1, required=True, help='A BED file contining peaks or sites to consider')
    required.add_argument('-i', '--inreadsbedpe', nargs=1, required=True, help='A BEDPE file containing the HiC reads, from one side to the other')
    required.add_argument('-n', '--label', nargs=1, required=True, help='A label for this sample to save the data to')

    parser._action_groups.append(optional)

    other_logs = logging.getLogger()
    other_logs.setLevel(logging.CRITICAL)

    logging.basicConfig(level=logging.INFO,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    logger = logging.getLogger('contactZ')
    logger.setLevel(level=logging.INFO)

    parser.log = logger

    return parser

def main():
    assert sys.version_info >= (3, 7), 'Python >=3.7 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log
    args.label = args.label[0]
    args.inreadsbedpe = args.inreadsbedpe[0]

    log.info('contactZ')
    log.info('Arguments:')
    log.info('  inreadsbedpe: %s' % args.inreadsbedpe)
    log.info('  inpeaksbed: %s' % args.inpeaksbed)
    log.info('  label: %s' % args.label)
    log.info('  window: %s' % args.window)
    log.info('  cached BEDPE: %s' % args.cached)
    log.info('Normalisation:')
    if not (args.gc or args.shuf):
        log.info('  [The default is to use a "sequencable genome" random background]')
    log.info('  gc: %s' % args.gc)
    log.info('  shuffled: %s' % args.shuf)

    if args.gc and args.shuf:
        log.error('Both gc and shuf cannot be used at the same time')
        sys.exit(1)

    if args.cached:
        log.info('Caching BEDPE')
        cache_bedpe = []
        with gzip.open(args.inreadsbedpe, 'rt') as oh:
            for idx, line in enumerate(oh):
                read_pair = line.strip().split('\t')
                chrom_left = read_pair[0]
                chrom_rite = read_pair[3]

                cpt = (int(read_pair[1]) + int(read_pair[2])) >> 1
                bin_left = (cpt // args.window) * args.window
                cpt = (int(read_pair[4]) + int(read_pair[5])) >> 1
                bin_rite = (cpt // args.window) * args.window
                cache_bedpe.append((chrom_left, chrom_rite, bin_left, bin_rite))
                if (idx + 1) % 1e7 == 0:
                    log.info('{0:,} reads processed'.format(idx + 1))
        args.inreadsbedpe = cache_bedpe
        log.info(f'Cached BEDPE, {len(cache_bedpe)} reads')

    te_hic = tehiclib.measure_contacts(logger=log)
    contacts, peaklen, len_peaks, num_reads_in_bedpe = te_hic.bed_to_bed(
        reads=args.inreadsbedpe,
        bed=args.inpeaksbed[0],
        window=args.window,
        outfile=f'{args.label}.out.tsv',
        threshold=1,
        )

    cZ = tehiclib.contact_z_score_cov(logger=log, GC=args.gc, super=args.shuf)

    # I need a few randoms here;
    bkgd = cZ.generate_matched_random(args.inpeaksbed[0])

    shuffled_contacts, shuffled_peak_len_in_bp, shuffled_len_peaks, num_reads_in_bedpe = te_hic.bed_to_bed(
        reads=args.inreadsbedpe,
        bed=bkgd,
        window=args.window,
        outfile=None, # Don't save the bkgc, not the intracon file
        threshold=1,
        _silent=True,
        )

    cZ.insert_contacts(contacts, len_peaks, peaklen, args.label, shuffled_contacts)
    cZ.calc_contact_Z()

    # plots;
    formers, breakers, neutral = cZ.plot_contact_Z_scatter(f'{args.label}.pdf')

    def save_breaker_former_neutral_tsv(data, filename):
        with open(filename, 'wt') as oh:
            oh.write('Factor\tcontactZ\n')
            for item in data:
                oh.write(f'{item[0]}\t{item[1]}\n')
            log.info(filename)

    save_breaker_former_neutral_tsv(formers, f'{args.label}.formers.tsv')
    save_breaker_former_neutral_tsv(breakers, f'{args.label}.breakers.tsv')
    save_breaker_former_neutral_tsv(neutral, f'{args.label}.neutral.tsv')
    save_breaker_former_neutral_tsv(formers + neutral + breakers, f'{args.label}.all.tsv')

    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
