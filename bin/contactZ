#!/usr/bin/env python3

'''

get chromatin contacts, based on one anchors, or a BED -> gene promoter

'''

import sys
import os
import argparse
import logging

script_path = os.path.dirname(os.path.realpath(__file__))

sys.path.append(os.path.join(script_path, '../'))
import tehiclib

sys.path.append(os.path.join(script_path, '../tehiclib'))
from miniglbase3 import glload

# Command-line options;
def prepare_parser():
    defaults = {
        '-w': 5000,
        '-t': 1
        }

    exmp = 'Example usage: contactZ -c peaks.bed -i reads.bedpe -n sample_label -g genome'

    description = 'Calculate a contact-Z score for '

    parser = argparse.ArgumentParser(prog='contactZ', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('-w', '--window', action='store', type=int, default=defaults['-w'], required=False, help='Window size (in base pairs) to look around the BED, default={}'.format(defaults['-w']))
    optional.add_argument('--gc', action='store_true', default=False, required=False, help='Enforce GC normalisation of the background')


    required = parser.add_argument_group('required arguments')

    required.add_argument('-p', '--inpeaksbed', nargs=1, required=True, help='A BED file contining peaks or sites to consider')
    required.add_argument('-i', '--inreadsbedpe', nargs=1, required=True, help='A BEDPE file containing the HiC reads, from one side to the other')
    required.add_argument('-n', '--label', nargs=1, required=True, help='A label for this sample to save the data to')

    parser._action_groups.append(optional)

    logger = logging.getLogger()
    logger.setLevel(level=logging.INFO)

    logging.basicConfig(level=logging.INFO,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('contactZ')

    return parser

def main():
    assert sys.version_info >= (3, 7), 'Python >=3.7 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log
    args.label = args.label[0]
    args.inreadsbedpe = args.inreadsbedpe[0]

    log.info('getContacts')
    log.info('Arguments:')
    log.info('  inreadsbedpe: %s' % args.inreadsbedpe)
    log.info('  inpeaksbed: %s' % args.inpeaksbed)
    log.info('  label: %s' % args.label)
    log.info('  window: %s' % args.window)

    te_hic = tehiclib.measure_contacts(logger=log)
    contacts, peaklen, len_peaks = te_hic.bed_to_bed(
        reads=args.inreadsbedpe,
        bed=args.inpeaksbed[0],
        window=args.window,
        outfile=f'{args.label}.out.tsv',
        threshold=1,
        )

    cZ = tehiclib.contact_z_score_cov(logger=log)

    # I need a few randoms here;
    log.info('Getting a shuffled background')
    shuffled_contacts, shuffled_peak_len_in_bp, shuffled_len_peaks = te_hic.bed_to_bed(
        reads=args.inreadsbedpe,
        bed=cZ.generate_matched_random(args.inpeaksbed[0], GC=args.gc),
        window=args.window,
        outfile=None,
        threshold=1,
        _silent=True,
        )

    cZ.insert_contacts(contacts, len_peaks, peaklen, args.label, shuffled_contacts)
    cZ.calc_contact_Z()

    # plots;
    cZ.plot_contact_Z_scatter(f'{args.label}.pdf')

    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
