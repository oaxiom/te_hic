#!/usr/bin/env python3

'''

A very simple counter for

'''

import sys, os, argparse, logging
import pysam

script_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(script_path, '../'))
import tehiclib

default_q = 10
default_mindist = 5000
default_resolutions = [300, 150, 50]

# Command-line options;
def prepare_parser():
    exmp = 'Minimal usage usage: te_hic -a read1.bam -b read2.bam -g genome'

    description = 'HiC data analysis, preserving TE information'

    parser = argparse.ArgumentParser(prog='te_hic', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('-l', '--label', nargs=1, type=str, default='te_hic', required=False, help='label for the sample name and output files, default=te_hic')
    optional.add_argument('-q', '--qual', nargs=1, type=int, default=default_q, required=False, help=f'q threshold for read quality filtering, default={default_q}')
    optional.add_argument('-d', '--mindist', nargs=1, type=int, default=default_mindist, required=False, help=f'Minimum distance (in base pairs) , default={default_mindist}')
    optional.add_argument('-r', '--resolutions', nargs=1, type=list, default=default_resolutions, required=False, help=f'Default resolutions for the matrices default={default_resolutions}')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-g', '--genome', nargs=1, required=True, help=f'Genome assembly to use, valid genomes: {tehiclib.common.valid_assemblies}')
    required.add_argument('-1', '--read1', nargs=1, required=True, help='the BAM alignment file containing the aligned reads pair 1')
    required.add_argument('-2', '--read2', nargs=1, required=True, help='the BAM alignment file containing the aligned reads pair 2')


    parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('te_hic')

    return parser

def main():
    assert sys.version_info >= (3, 7), 'Python >=3.7 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log

    log.info('Arguments:')
    log.info(f'  Read1: {args.read1[0]}')
    log.info(f'  Read2: {args.read2[0]}')
    log.info(f'  Genome: {args.genome[0]}')
    log.info(f'  Quality thresold: {args.qual} (default is {default_q})')
    log.info(f'  Minimum contact distance: {args.mindist} (default is {default_mindist})')
    log.info(f'  Matrix resolutions to build: {args.resolutions} kbp (default is {default_resolutions})')

    te_hic = tehiclib.te_hic(genome=args.genome[0], label=args.label, logger=log)

    # stage 1
    log.info('Stage 1: Collect valid read pairs')
    te_hic.stage1_collect_valid_pairs(args.read1[0], args.read2[0], min_dist=args.mindist, min_qual=args.qual)

    log.info(f'Stage 2: Assign to {args.genome[0]} genome features')
    te_hic.stage2_assign_to_genome_feature()

    log.info('Stage 3: Quantify links')
    te_hic.stage3_quantify_links()

    log.info('Stage 4: Build Matrices')
    te_hic.stage4_build_matrices(args.resolutions)

    return

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt\n")
        sys.exit(0)
